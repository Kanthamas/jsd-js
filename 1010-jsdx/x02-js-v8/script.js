"use strict";

const num1 = 1;
let num2 = 2;
var num3 = 333;

function add(a, b) {
	return a + b;
}

const sum = add(num1, num2);

console.log(sum);

// Execution Context //
// Global EC + Function EC in Call Stack
// 1. Memory Creation Phase (var, function() hoisting in Global EC <in Global object> | let, const declared but not accessible in TDZ <in Script Scope>)
// 2. Execution Phase

// The Parser --> AST: Abstract Syntax Tree //
// https://esprima.org/demo/parse.html?code=function%20add(a%2C%20b)%20%7B%0A%20%20return%20a%20%2B%20b%3B%0A%7D%0A%0Aconst%20sum%20%3D%20add(4%2C%206)%3B%0A%0Aconsole.log(sum)%3B

// Bytecode //
// https://cryptii.com/

// The Interpreter (V8: Ignition) --> Bytecode --> Executed virtually (VM) +  Bytecode complilation  (Sparkplug: Non-optimized machine code) --> The Profiler: analyzed "HOT" function (frequently called)--> Turbofan (JIT compiler): Optimized machine code) --> Executed natively (faster by Inline caching (ICs))//
// JS is dynamically typed, so type can change and shape of objects too
// $ node --print-bytecode --print-bytecode-filter=add ./1010-jsdx/x02-js-v8/script.js
/* [generated bytecode for function: add (0x02c945b01509 <SharedFunctionInfo add>)]
Bytecode length: 6
Parameter count 3
Register count 0
Frame size 0
   40 S> 000001A90C9435A8 @    0 : 0b 04             Ldar a1
   49 E> 000001A90C9435AA @    2 : 3b 03 00          Add a0, [0]
   53 S> 000001A90C9435AD @    5 : ae                Return
Constant pool (size = 0)
Handler Table (size = 0)
Source Position Table (size = 8)
0x01a90c9435b1 <Other heap object (TRUSTED_BYTE_ARRAY_TYPE)>
10 */
